# 
# Gloabl values
#

global:
  postgresql:
    auth:
      postgresPassword: "password!123" # pragma: allowlist secret
      database: "peregrine"


# Default values for tube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/cdis/tube
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}


service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {
    nginx.ingress.kubernetes.io/rewrite-target: /$2,
    kubernetes.io/ingress.class: "nginx"
  }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ingress.local
      paths:
        - path: "/user(/|$)(.*)"
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  limits:
    cpu: 1.0
    memory: 12Gi

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


nodeSelector: {}

tolerations: []

labels: 
  app: tube
  release: production
  # for network policy selectors
  authprovider: "yes"
  # uses explicit proxy and AWS APIs
  netnolimit: "yes"
  public: "yes"
  userhelper: "yes"
  tags.datadoghq.com/service: "tube"
  tags.datadoghq.com/env: qaplanetv1
  tags.datadoghq.com/version: 2021.12
affinity: 
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - tube
        topologyKey: "kubernetes.io/hostname"

env: 
  - name: DICTIONARY_URL
    valueFrom:
      configMapKeyRef:
        name: manifest-global
        key: dictionary_url
  - name: HADOOP_URL
    value: hdfs://spark-service:9000
  - name: ES_URL
    value: esproxy-service
  - name: HADOOP_HOST
    value: spark-service
  - name: HADOOP_CLIENT_OPTS
    value: -Xmx1g
  - name: SPARK_EXECUTOR_MEMORY
    value: 4g
  - name: SPARK_DRIVER_MEMORY
    value: 6g

      
volumes: 
  - name: creds-volume
    secret:
      secretName: "peregrine-creds"
  - name: etl-mapping
    configMap:
      name: etl-mapping
  - name: fence-yaml
    configMap:
      name: fence

volumeMounts: 
  - name: "creds-volume"
    readOnly: true
    mountPath: "/gen3/tube/creds.json"
    subPath: creds.json
  - name: "etl-mapping"
    readOnly: true
    mountPath: "/gen3/tube/etlMapping.yaml"
    subPath: "etlMapping.yaml"
  - name: "fence-yaml"
    mountPath: "/gen3/tube/user.yaml"
    subPath: user.yaml           

selectorLabels: 
  app: tube
  release: production


# Whether or not to deploy a local postgres pod
postgres: 
  enabled: false

etl_mapping: 
