apiVersion: apps/v1
kind: Deployment
metadata:
  name: fence-deployment
  labels:
    {{- include "fence.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "fence.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "fence.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "fence.serviceAccountName" . }}
      volumes:
        - name: old-config-volume
          secret:
            secretName: "fence-secret"
        - name: json-secret-volume
          secret:
            secretName: "fence-json-secret"
            optional: true
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
            optional: true
        - name: logo-volume
          configMap:
            name: "logo-config"
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: "fence-google-app-creds-secret"
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: "fence-google-storage-creds-secret"
        - name: fence-jwt-keys
          secret:
            secretName: "fence-jwt-keys"
        - name: privacy-policy
          configMap:
            name: "privacy-policy"
        - name: yaml-merge
          configMap:
            name: "fence-yaml-merge"
            optional: true

      containers:
        - name: fence
          image: "quay.io/cdis/fence:{{ .Chart.AppVersion }}"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_status
              port: http
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              if [[ -f /fence/keys/key/jwt_private_key.pem ]]; then
                openssl rsa -in /fence/keys/key/jwt_private_key.pem -pubout > /fence/keys/key/jwt_public_key.pem
              fi
              bash /fence/dockerrun.bash && if [[ -f /dockerrun.sh ]]; then bash /dockerrun.sh; fi
          env:
            - name: DD_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: manifest-global
                  key: dd_enabled
                  optional: true
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_TRACE_SAMPLE_RATE
              value: "1"
            - name: GEN3_UWSGI_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: manifest-global
                  key: uwsgi-timeout
                  optional: true
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: AWS_STS_REGIONAL_ENDPOINTS
              value: regional
            - name: PYTHONPATH
              value: /var/www/fence
            - name: GEN3_DEBUG
              value: "False"
            - name: FENCE_PUBLIC_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: manifest-fence
                  key: fence-config-public.yaml
                  optional: true
          volumeMounts:
            - name: "old-config-volume"
              readOnly: true
              mountPath: "/var/www/fence/local_settings.py"
              subPath: local_settings.py
            - name: "json-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_credentials.json"
              subPath: fence_credentials.json
            - name: "creds-volume"
              readOnly: true
              mountPath: "/var/www/fence/creds.json"
              subPath: creds.json
            - name: "config-helper"
              readOnly: true
              mountPath: "/var/www/fence/config_helper.py"
              subPath: config_helper.py
            - name: "logo-volume"
              readOnly: true
              mountPath: "/fence/fence/static/img/logo.svg"
              subPath: "logo.svg"
            - name: "privacy-policy"
              readOnly: true
              mountPath: "/fence/fence/static/privacy_policy.md"
              subPath: "privacy_policy.md"
            - name: "config-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence-config.yaml"
              subPath: fence-config.yaml
            - name: "yaml-merge"
              readOnly: true
              mountPath: "/var/www/fence/yaml_merge.py"
              subPath: yaml_merge.py
            - name: "fence-google-app-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
              subPath: fence_google_app_creds_secret.json
            - name: "fence-google-storage-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
              subPath: fence_google_storage_creds_secret.json
            - name: "fence-jwt-keys"
              readOnly: true
              mountPath: "/fence/keys/key/jwt_private_key.pem"
              subPath: "jwt_private_key.pem"
      initContainers:
        - name: fence-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              # echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              # python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              if fence-create migrate --help > /dev/null 2>&1; then
                if ! grep -E 'ENABLE_DB_MIGRATION"?: *false' /var/www/fence/fence-config.yaml; then
                  echo "Running db migration: fence-create migrate"
                  cd /fence
                  fence-create migrate
                else
                  echo "Db migration disabled in fence-config"
                fi
              else
                echo "Db migration not available in this version of fence"
              fi
          volumeMounts:
            - name: "config-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence-config.yaml"
              subPath: fence-config.yaml
            - name: "yaml-merge"
              readOnly: true
              mountPath: "/var/www/fence/yaml_merge.py"
              subPath: yaml_merge.py
            - name: "fence-google-app-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
              subPath: fence_google_app_creds_secret.json
            - name: "fence-google-storage-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
              subPath: fence_google_storage_creds_secret.json
          env:
              - name: PYTHONPATH
                value: /var/www/fence
              - name: FENCE_PUBLIC_CONFIG
                valueFrom:
                  configMapKeyRef:
                    name: manifest-fence
                    key: fence-config-public.yaml
                    optional: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fence
              topologyKey: "kubernetes.io/hostname"
